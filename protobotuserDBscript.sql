-- MySQL Script generated by MySQL Workbench
-- Tue Aug 31 05:16:10 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
-- MODIFIED BY Rose/Daniel
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema MMODB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `MMODB` ;

-- -----------------------------------------------------
-- Schema MMODB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `MMODB` DEFAULT CHARACTER SET utf8 ;
USE `MMODB` ;

-- -----------------------------------------------------
-- Table `MMODB`.`RACE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`RACE` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`RACE` (
  `Race_ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `StrGain` INT NULL,
  `AgiGain` INT NULL,
  `IntGain` INT NULL,
  PRIMARY KEY (`Race_ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MMODB`.`CLASS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`CLASS` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`CLASS` (
  `Class_ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `StrGain` INT NULL,
  `AgiGain` INT NULL,
  `IntGain` INT NULL,
  PRIMARY KEY (`Class_ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MMODB`.`USER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`USER` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`USER` (
  `User_ID` INT NOT NULL AUTO_INCREMENT,
  `Username` VARCHAR(45) NOT NULL,
  `Level` INT NOT NULL DEFAULT 1,
  `Fame` INT NOT NULL DEFAULT 0,
  `Pouch` INT NOT NULL DEFAULT 0,
  `Bank` INT NOT NULL DEFAULT 0,
  `Strength` INT NOT NULL DEFAULT 1,
  `Agility` INT NOT NULL DEFAULT 1,
  `Intelligence` INT NOT NULL DEFAULT 1,
  `Race_ID` INT NOT NULL,
  `Class_ID` INT NOT NULL,
  `UnclassedCheck` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`User_ID`),
  INDEX `fk_USER_RACE1_idx` (`Race_ID` ASC) VISIBLE,
  INDEX `fk_USER_CLASS1_idx` (`Class_ID` ASC) VISIBLE,
  CONSTRAINT `fk_USER_RACE1`
    FOREIGN KEY (`Race_ID`)
    REFERENCES `MMODB`.`RACE` (`Race_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USER_CLASS1`
    FOREIGN KEY (`Class_ID`)
    REFERENCES `MMODB`.`CLASS` (`Class_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MMODB`.`ITEM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`ITEM` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`ITEM` (
  `Item_ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Effect` VARCHAR(45) NULL,
  PRIMARY KEY (`Item_ID`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `MMODB`.`USERINVENTORY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`USERINVENTORY` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`USERINVENTORY` (
  `User_ID` INT NOT NULL,
  `Item_ID` INT NOT NULL,
  `Quantity` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`User_ID`, `Item_ID`),
  INDEX `fk_USERS_has_ITEMS_ITEMS1_idx` (`Item_ID` ASC) VISIBLE,
  INDEX `fk_USERS_has_ITEMS_USERS1_idx` (`User_ID` ASC) VISIBLE,
  CONSTRAINT `fk_USERS_has_ITEMS_USERS1`
    FOREIGN KEY (`User_ID`)
    REFERENCES `MMODB`.`USER` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USERS_has_ITEMS_ITEMS1`
    FOREIGN KEY (`Item_ID`)
    REFERENCES `MMODB`.`ITEM` (`Item_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `MMODB`.`SKILL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`SKILL` ;

CREATE TABLE IF NOT EXISTS `MMODB`.`SKILL` (
  `Skill_ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Effect` VARCHAR(45) NULL,
  `Class_ID` INT NULL,
  `LevelMin` INT NULL,
  PRIMARY KEY (`Skill_ID`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `MMODB`.`SKILLLIST`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MMODB`.`SKILLLIST` ;

-- TABLE of all possible skills any player can learn
-- populated by joining user and skill on class_ID
-- When player learn a skill update learned to true and increment skill_level
CREATE TABLE IF NOT EXISTS `MMODB`.`SKILLLIST` (
  `User_ID` INT NOT NULL,
  `Skill_ID` INT NOT NULL,
  `Learned` BOOL DEFAULT False,
  `Skill_level` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`User_ID`, `Skill_ID`),
  INDEX `fk_USER_has_SKILL_SKILL1_idx` (`Skill_ID` ASC) VISIBLE,
  INDEX `fk_USER_has_SKILL_USER1_idx` (`User_ID` ASC) VISIBLE,
  CONSTRAINT `fk_USER_has_SKILL_USER1`
    FOREIGN KEY (`User_ID`)
    REFERENCES `MMODB`.`USER` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USER_has_SKILL_SKILL1`
    FOREIGN KEY (`Skill_ID`)
    REFERENCES `MMODB`.`SKILL` (`Skill_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- --------- QUERIES AND TESTING AND STUFF --------- WRITTEN BY: Rose/Daniel
SELECT * FROM CLASS;
SELECT * FROM ITEM;
SELECT * FROM RACE;
SELECT * FROM SKILL;
SELECT * FROM SKILLLIST;
SELECT * FROM USER;
SELECT * FROM USERINVENTORY;

-- RACES
INSERT INTO RACE (Name, StrGain, AgiGain, IntGain) VALUES ('Human', 2, 2, 2);
INSERT INTO RACE (Name, StrGain, AgiGain, IntGain) VALUES ('Dwarf', 3, 1, 2);

-- CLASSES
INSERT INTO CLASS VALUES (NULL, 'Unclassed', 0, 0, 0);
INSERT INTO CLASS VALUES (NULL, 'Warrior', 3, 1, 1);
INSERT INTO CLASS VALUES (NULL, 'Archer', 1, 3, 1);
INSERT INTO CLASS VALUES (NULL, 'Mage', 1, 1, 3);

-- ITEMS
INSERT INTO ITEM VALUES (NULL, 'Sword', 'It\'s a sword');
INSERT INTO ITEM VALUES (NULL, 'Bandages', 'It heals you when you use it');

-- BASIC/UNCLASSED SKILLS
-- LEVEL 1
INSERT INTO SKILL VALUES (NULL, 'Basic Melee Attack', 'You strike with your weapon, STR+Level dmg', 1, 1);
INSERT INTO SKILL VALUES (NULL, 'Basic Ranged Attack', 'You throw or fire your weapon, AGI+Level dmg', 1, 1);
-- LEVEL 2
INSERT INTO SKILL VALUES (NULL, 'Dodge', 'You attempt to dodge, AGI/(AGI+20) chance', 1, 2);

-- CLASSED SKILLS
-- LEVEL 2
INSERT INTO SKILL VALUES (NULL, 'Power Strike', 'Stronger strike, STR*(SkillLevel+Level) dmg', 2, 1);
INSERT INTO SKILL VALUES (NULL, 'Aimed Shot', 'Guaranteed crit, 2*(AGI+Level) dmg', 3, 2);

-- TEST USERS
INSERT INTO USER (Username, Race_ID, Class_ID) VALUES ('Human Mage Level 1', 1, 3);
INSERT INTO USER (Username, Race_ID, Class_ID, Level) VALUES ('Dwarf Warrior Test Level 4', 2, 2, 4);
INSERT INTO USER (Username, Race_ID, Class_ID, Level) VALUES ('Human Archer Test Level 3', 1, 3, 3);

-- TEST INVENTORY
INSERT INTO USERINVENTORY VALUES (1, 1, 1);
INSERT INTO USERINVENTORY VALUES (2, 2, 3);
INSERT INTO USERINVENTORY VALUES (1, 2, 4);

-- QUERIES
-- Query when ran will combine USER table and SKILL table into a table
-- that contains an entry for every skill each user can learn, along with a
-- column that identifies if it has been learnt
INSERT INTO SKILLLIST (User_ID, Skill_ID)
	SELECT u.User_ID, s.Skill_ID
		FROM SKILL s
	JOIN USER u
		ON (s.Class_ID = u.Class_ID OR s.Class_ID = u.UnclassedCheck)
			AND (u.Level >= s.LevelMin)
	ORDER BY Skill_ID ASC;

-- Query when ran will select the learnt/unlearnt skills of an individual player. Can be used
-- to show a list of learnt abilities as well as unlearnt abilities players can choose to learn?
-- We reasonably could just use User_ID and Skill_ID, and instead of a string for EFFECT just a calculation of some kind idk how
-- importing SQL works lol. Based on User_ID and Learned value inputted (in this case, 1 and 0)
SELECT sl.User_ID, u.Username, s.Skill_ID, s.Name, s.Effect
	FROM SKILLLIST sl	
	JOIN SKILL s
		ON sl.Skill_ID = s.Skill_ID
	JOIN USER u
		ON sl.User_ID = u.User_ID
	-- 1 would mean the user learnt it, 0 means they have not chosen to learn it
    -- User_ID can be changed to reflect an input
	WHERE
		Learned = 0
		AND u.User_ID = 1;
    
-- Query when ran will select a an individual user's inventory along with the name, quantity, and effect
-- based on the User_ID inputted (in this case, 1)
SELECT inv.User_ID, u.Username, inv.Item_ID, i.Name, inv.Quantity, i.Effect
	FROM USERINVENTORY inv
	JOIN USER u
		ON u.User_ID = inv.User_ID
	JOIN ITEM i
		ON i.Item_ID = inv.Item_ID
	WHERE
		u.User_ID = 1;
